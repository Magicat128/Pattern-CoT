import random
from sentence_transformers import SentenceTransformer
from sklearn.cluster import KMeans, MiniBatchKMeans, HDBSCAN
from sklearn.decomposition import PCA
import numpy as np
import json
import matplotlib.pyplot as plt
import argparse
from utils import fix_seed
import re


def parse_arguments():
    parser = argparse.ArgumentParser(description="Zero-shot-CoT")
    parser.add_argument(
        "--task", type=str, default="gsm8k",
        choices=["aqua", "gsm8k", "commonsensqa", "addsub", "multiarith", "strategyqa", "svamp", "singleeq", "coin_flip", "last_letters", "object_tracking", "bigbench_date"], help="dataset used for experiment"
    )
    parser.add_argument(
        "--max_ra_len", type=int, default=20, help="maximum number of reasoning chains"
    )
    parser.add_argument(
        "--max_cot_len", type=int, default=512, help="maximum length of cot"
    )
    parser.add_argument(
        "--k", type=int, default=8, help="number of clusters"
    )
    parser.add_argument(
        "--method", type=str, default="pattern_cot", help="method"
    )
    parser.add_argument(
        "--pred_file", type=str, default="log/gsm8k.log",
        help="use the reasoning chains generated by zero-shot-cot."
    )
    parser.add_argument(
        "--demo_save_dir", type=str, default="demos/gsm8k", help="where to save the contructed demonstrations"
    )
    parser.add_argument("--random_seed", type=int, default=192, help="random seed")
    parser.add_argument(
        "--encoder", type=str, default="./all-MiniLM-L6-v2", help="which sentence-transformer encoder for clustering"
    )
    parser.add_argument(
        "--sampling", type=str, default="center", help="whether to sample the cluster center first"
    )
    parser.add_argument(
        "--debug", type=bool, default=True, help="debug mode"
    )
    args = parser.parse_args()
    return args

def main():
    args = parse_arguments()
    fix_seed(args.random_seed)
    encoder = SentenceTransformer(args.encoder)

    task = args.task
    pred_file = args.pred_file
    save_file = args.demo_save_dir
    if task == "aqua":
        num_clusters = 4
    elif task == "last_letters":
        num_clusters = 4
    elif task == "commonsensqa":
        num_clusters = 7
    elif task == "strategyqa":
        num_clusters = 6
    else:
        num_clusters = args.k

    corpus = []
    question = []
    rationale = []
    gold_ans = []
    pred_ans = []
    reasoning_pattern = []
    output = []

    with open(pred_file, "r", encoding="utf-8") as fp:
        answer_seg = ""
        last_line = ""
        for line in fp:
            if "Q: " in line:
                c_question = line.strip()
            if "A: " in line:
                answer_seg = line
            elif "Therefore" in line and ("the answer" in line) or ("answer is" in line) or ("final answer" in line):
                c_rationale = answer_seg

            elif answer_seg != "":
                answer_seg += line
            if "pred :" in line:
                c_pred_ans = line.split(":")[1].strip()
            if "GT :" in line:
                c_gold_ans = line.split(":")[1].strip()

                c_rationale = c_rationale.replace("A: Let's think step by step.", "Let's think step by step. ")
                c_question = c_question + "\nA:"
                
                corpus.append(c_question + c_rationale)
                question.append(c_question)
                rationale.append(c_rationale)
                pred_ans.append(c_pred_ans)
                output.append({"input":c_question[3:], "output":c_rationale})

                # Define reasoning symbols
                if task == "coin_flip":
                    symbols = ['heads up', 'tails up']
                elif task == "bigbench_date":
                    symbols = [' day ', 'week', 'month', 'year', 'ago', 'yesterday', 'tommorrow']
                elif task == "object_tracking":
                    symbols = ['swap', 'switch', 'trade', 'exchange'] 
                elif task == "gsm8k":
                    symbols = ['more','less','twice','half','+','-','*','/']
                elif task == "aqua":
                    symbols = ['+','-','*','/','π','√','sqrt','^','°','log',':','=']
                elif task in ("multiarith", "singleeq", "svamp", "addsub"):
                    symbols = ['+','-','*','/','%','÷','=']

                # Extract patterns
                symbol_list = []
                for ra in c_rationale.split('. '):
                    for s in symbols:
                        if s.lower() in ra.lower():
                            symbol_list.append(s.strip())
                reasoning_pattern.append(str(len(c_rationale.split('. '))) + '\n' + ''.join(symbol_list))

                if args.debug:
                    gold_ans.append(c_gold_ans)
                answer_seg = ""

    if args.method == "auto_cot":
        corpus_embeddings = encoder.encode(corpus)
    elif args.method == "pattern_cot":
        corpus_embeddings = encoder.encode(reasoning_pattern)

    # Perform kmean clustering
    clustering_model = KMeans(n_clusters=num_clusters, random_state=args.random_seed)
    clustering_model.fit(corpus_embeddings)
    cluster_assignment = clustering_model.labels_

    clustered_sentences = [[] for i in range(num_clusters)]

    dist = clustering_model.transform(corpus_embeddings)
    clustered_dists = [[] for i in range(num_clusters)]
    clustered_idx = [[] for i in range(num_clusters)]
    for sentence_id, cluster_id in enumerate(cluster_assignment):
        clustered_sentences[cluster_id].append(corpus[sentence_id])
        clustered_dists[cluster_id].append(dist[sentence_id][cluster_id])
        clustered_idx[cluster_id].append(sentence_id)
    
    demos = []
    for i in range(len(clustered_dists)):
        print("Cluster ", i+1)
        tmp = list(map(list, zip(range(len(clustered_dists[i])), clustered_dists[i])))
        top_min_dist = sorted(tmp, key=lambda x: x[1], reverse=False)
        if not args.sampling == "center":
            random.shuffle(top_min_dist)
        for element in top_min_dist:
            min_idx = element[0]
            c_rationale = rationale[clustered_idx[i][min_idx]].strip()
            c_pred_ans = pred_ans[clustered_idx[i][min_idx]].strip()
            c_gold_ans = gold_ans[clustered_idx[i][min_idx]].strip()

            if len(question[clustered_idx[i][min_idx]].strip().split()) <= args.max_cot_len \
                and c_rationale != "Let's think step by step." \
                and c_rationale != "" \
                and len(c_rationale.replace("\n\n", "\n").split(". ")) <= args.max_ra_len and c_pred_ans != "": # and c_rationale[-1] == ".":
                #and len(rationale[clustered_idx[i][min_idx]].strip().split()) <= 80 \
                if args.task in ["gsm8k", "multiarith", "singleeq", "addsub", "svamp"]:
                    if not (c_pred_ans.strip() in c_rationale.split(".")[-2] or c_pred_ans.strip() in c_rationale.split()[-10:]):
                        continue
                c_question = question[clustered_idx[i][min_idx]]
                c_rationale = c_rationale.replace("\n\n", "\n").replace("\n", " ").strip()
                c_rationale = " ".join(c_rationale.split())
                if args.debug:
                    c_gold_ans = gold_ans[clustered_idx[i][min_idx]]
                else:
                    c_gold_ans = None
                demo_element = {
                    "question": c_question,
                    "rationale": c_rationale,
                    "pred_ans": c_pred_ans,
                    "gold_ans": c_gold_ans,
                }
                demos.append(demo_element)
                print(c_question)
                print(c_rationale)
                print(c_pred_ans)
                print(c_gold_ans)
                print("")
                break
    
    demos = {"demo": demos}

    with open(args.demo_save_dir, 'w', encoding="utf-8") as write_f:
        json.dump(demos, write_f, indent=4, ensure_ascii=False)

    '''
    y_km = clustering_model.fit_predict(step_embeddings)
    pca_model = PCA(n_components=2, random_state=args.random_seed)
    transformed = pca_model.fit_transform(step_embeddings)
    centers = pca_model.transform(clustering_model.cluster_centers_)

    plt.scatter(x=transformed[:, 0], y=transformed[:, 1], c=y_km, s=50, cmap=plt.cm.Paired, alpha=0.4)
    plt.scatter(centers[:, 0],centers[:, 1],
            s=250, marker='*', label='centroids',
            edgecolor='black',
            c=np.arange(0,num_clusters),cmap=plt.cm.Paired,)
    plt.xticks([])
    plt.yticks([])
    plt.savefig(save_file+".png") #, dpi=600)
    '''

if __name__ == "__main__":
    main()
